name: Build and Deploy FE

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: false
        default: 'main'

env:
  IMAGE_TAG: latest-fe

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.0'  # adjust to your Flutter version
          
      - name: Get dependencies
        run: flutter pub get

      - name: Build web
        run: flutter build web --release

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .

      - name: Push to Amazon ECR
        run: |
          docker push ${{ secrets.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Decode and Save SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" | base64 -d > ec2_key.pem
          chmod 600 ec2_key.pem

      - name: SSH to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
      
            cd /home/ubuntu/mongo-stack
      
            echo "Logging in to Amazon ECR..."
            aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID }}"
            aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
            aws configure set region "${{ secrets.AWS_REGION }}"
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $(echo ${{ secrets.ECR_REPOSITORY }} | cut -d'/' -f1)
      
            echo "Pulling latest image and restarting kalgus_fe..."
            docker-compose pull kalgus_fe
            docker-compose down
            docker-compose up -d
          EOF
